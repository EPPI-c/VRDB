name: Generate Issue Report on Close
on:
  issues:
    types: [closed]  # Se ejecutará cuando un issue sea cerrado
permissions:
  contents: write
jobs:
  generate-md-file:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo A comment on issue $NUMBER
        env:
          NUMBER: ${{ github.event.issue.number }}
      - run: |
          echo A comment on body $input
        env:
          BODY: ${{ github.event.issue.body }}
          input: $BODY
      - run: |
          BODY="${{ github.event.issue.body }}"
          tag_steamvr="### Steamvr"
          tags=("### Steamvr" "### Monado" "### ALVR" "### WIVRN" "### GPU vendor" "### Distribution" "### Headset" "### Description" "### Date")
          
          function filter_tags () {
              local tag="$1"  # Recibe el argumento de la etiqueta actual
          
              # Filtrar el contenido y asignarlo a una variable
              content_filtered=$(echo "$BODY" | sed -n "/$tag/,/^###/{ /^###/d; p }")
              
              # Eliminar saltos de línea al principio y al final
              content_filtered=$(echo "$content_filtered" | sed ':a; /^\s*$/d; N; s/^\n*//; s/\n*$//; ta')
              
              # Ruta al archivo
              file="${{ github.action_path }}/src/games/superhot-vr.md"
              
              # Eliminar la última línea (opcional según lo que necesites)
              sed -i '$ d' "$file"
              
              # Formatear el contenido con el prefijo
              content_filtered="    - ${tag#\### }: $content_filtered"
              
              # Añadir el contenido formateado al final del archivo
              echo -e "\n$content_filtered" >> "$file"
              
              # Añadir un separador (opcional)
              echo -e "---" >> "$file"
              
              # Imprimir el archivo para confirmar los cambios
              cat "$file"
          }
          
          for tag in "${tags[@]}"; do
              filter_tags "$tag"  # Pasar cada etiqueta a la función
          done




          
          # Configurar Git en GitHub Actions
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Añadir el archivo modificado al repositorio
          git add "$file"
          
          # Realizar un commit con un mensaje descriptivo
          git commit -m "Update superhot-vr.md with filtered content from issue"
          
          # Configurar el repositorio remoto para usar GITHUB_TOKEN
          repo_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$repo_url"
          
          # Subir los cambios al repositorio
          git push origin HEAD:${{ github.ref_name }}

        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
